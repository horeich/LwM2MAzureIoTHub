// NOTE: the config is in HOCON format [1][2][3].
//       [1] https://en.wikipedia.org/wiki/HOCON
//       [2] https://www.playframework.com/documentation/2.5.x/ConfigFile
//       [3] https://github.com/typesafehub/config/blob/master/HOCON.md
//       By convention property names are lowercase.
//       By convention env. variable name are uppercase.

app.com.horeich {
    webservicePort : ${http.port}
    storageAdapterWebServiceUrl: "testurl2" //${?PCS_STORAGEADAPTER_WEBSERVICE_URL}
    deviceSimulationWebServiceUrl: "testurl1" //${?PCS_DEVICESIMULATION_WEBSERVICE_URL}
    telemetryUrl: "http://localhost:9021" //${?PCS_TELEMETRY_WEBSERVICE_URL}
    seedTemplate: "default"
    azureMapsKey: "testkey" //${?PCS_AZUREMAPS_KEY}
    registrationUrl: "http://localhost:9021"

    keyvault {
      aadAppId : ${PCS_AAD_APPID}
      aadAppSecret : ${PCS_AAD_APPSECRET}
      name : ${PCS_KEYVAULT_NAME}
    }

    client-auth {
      authWebServiceUrl: "testurl3" // //${?PCS_STORAGEADAPTER_WEBSERVICE_URL}
    }
}

http {
  port: 9005
}

// TODO: this should be inside the service configuration
cache {
  TTL: 3600
  rebuild-timeout: 20
}

// Play uses a secret key for a number of things, including:
// * Signing session cookies and CSRF tokens
// * Built in encryption utilities
// Azure IoT Solutions don't require this setting, however you should
//   set a value if you plan to use Play crypto libraries.
// * see https://www.playframework.com/documentation/2.6.x/ApplicationSecret
// * see https://www.playframework.com/documentation/2.6.x/CryptoMigration25
// Note: "play.crypto.secret" has been deprecated
play.http.secret.key = "changeme"
play.http.secret.key = ${PCS_AAD_APPSECRET}

play.http.parser.maxMemoryBuffer = 300K
parsers.anyContent.maxLength = 300K

// Errors handler
play.http.errorHandler = "com.microsoft.azure.iotsolutions.uiconfig.webservice.filters.ErrorHandler"

// Restrict web service to authorized clients
play.filters.enabled += com.microsoft.azure.iotsolutions.uiconfig.webservice.auth.AuthorizationFilter

// Disable CSRF protection for AJAX requests containing the Csrf-Token header
// see https://www.playframework.com/documentation/2.6.x/JavaCsrf
play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}

// See https://www.playframework.com/documentation/2.6.x/CorsFilter
// Play provides a filter that implements Cross-Origin Resource Sharing (CORS).
// Allows web applications to make requests from the browser across different domains
// play.filters.enabled += play.filters.cors.CORSFilter
//play.filters.cors {
//  pathPrefixes = ["/some/path", ...]
//  allowedOrigins = ["https://www.contoso.com", ...]
//  allowedHttpMethods = ["GET", "POST", "PATCH", "PUT", "DELETE"]
//  allowedHttpHeaders = ["Accept"]
//  preflightMaxAge = 3 days
//}

// See https://www.playframework.com/documentation/2.6.x/AllowedHostsFilter
// Play provides a filter that lets you configure which hosts can access your application.
// You can use the "." pattern to match all hosts (not recommended in production)
//play.filters.hosts {
//  // Allow requests to example.com, its subdomains, and localhost:9000.
//  allowed = [".contoso.com", "localhost:9000"]
//}
play.filters.disabled += play.filters.hosts.AllowedHostsFilter

akka {
  // Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel: INFO
}

pidfile.path = "/dev/null"
